class Employee:
    no_of_leaves=8

    def __init__(self,aname,asalary,arole):
        self.name=aname
        self.salary=asalary
        self.role=arole

    def printdetails(self):
        return f"The name is {self.name}. Salary is {self.salary} and role is {self.role} "

    @classmethod
    def change_leaves(cls, newleaves):
        cls.no_of_leaves = newleaves

    @classmethod
    def from_dash(cls, string):
        return cls(*string.split("-"))

    @staticmethod
    def printgood(string):
        print("This is good ", + string)


class Programmer(Employee): #Here we are inheriting CoolProgrammer class from Employee class and Player class
    def __init__(self, aname, asalary, arole, alanguages):
        self.name = aname
        self.salary = asalary
        self.role = arole
        self.languages=alanguages

    def printprog(self):
        return f"The programmer's name is {self.name}. Salary is {self.salary} and role is {self.role}. The languages are {self.languages}"

harry=Employee("Harry",255,"Instructor")
rohan=Employee("Rohan",455,"Student")

shubham=Programmer("Shubham",555,"Programmer",["python"]) #We are having to give an extra different argument beacuse their __init__ is different
karan=Programmer("Karan",777,"Programmer",['python'])

print(karan.printprog())

"""Now we will be running a method from Employee class in karan which is an object from Programmer class."""

print(karan.printdetails())

